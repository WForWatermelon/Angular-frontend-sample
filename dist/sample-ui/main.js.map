{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/employee/employee.component.css","webpack:///./src/app/employee/employee.component.html","webpack:///./src/app/employee/employee.component.ts","webpack:///./src/app/httpclient.service.ts","webpack:///./src/app/new-dialog/new-dialog.component.css","webpack:///./src/app/new-dialog/new-dialog.component.html","webpack:///./src/app/new-dialog/new-dialog.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<app-employee></app-employee>\\n\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'sample-ui';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EmployeeComponent } from './employee/employee.component';\nimport { MatSliderModule } from '@angular/material/slider';\nimport {MatInputModule} from '@angular/material/input';\nimport {FormControl, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport {\n  MatCard,\n  MatCardModule,\n  MatListModule,\n  MatToolbarModule,\n  MatButtonModule,\n  MatTabsModule,\n  MatTableModule, MatSnackBarModule,\n  MatDialogModule\n} from '@angular/material';\nimport { NewDialogComponent } from './new-dialog/new-dialog.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    EmployeeComponent,\n    NewDialogComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatSliderModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatButtonModule,\n    MatTabsModule,\n    HttpClientModule,\n    MatCardModule,\n    MatToolbarModule,\n    MatListModule,\n    MatTableModule,\n    MatSnackBarModule,\n    MatDialogModule\n  ],\n  entryComponents: [NewDialogComponent],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".example{\\n   \\n    margin-left: 5%;\\n\\n  }\\n  .form-group{\\n    margin-right: 40%;\\n  }\\n  .btn.btn-primary {\\n   \\n    margin-left: 5%;\\n  }\\n  .material-icons{\\n    margin-right: 20px;\\n  }\\n  .material-icons:hover{\\n    cursor: pointer;\\n  }\\n  table {\\n  width: 48%;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZW1wbG95ZWUvZW1wbG95ZWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7SUFFSSxlQUFlOztFQUVqQjtFQUNBO0lBQ0UsaUJBQWlCO0VBQ25CO0VBQ0E7O0lBRUUsZUFBZTtFQUNqQjtFQUNBO0lBQ0Usa0JBQWtCO0VBQ3BCO0VBQ0E7SUFDRSxlQUFlO0VBQ2pCO0VBQ0Y7RUFDRSxVQUFVO0FBQ1oiLCJmaWxlIjoic3JjL2FwcC9lbXBsb3llZS9lbXBsb3llZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmV4YW1wbGV7XG4gICBcbiAgICBtYXJnaW4tbGVmdDogNSU7XG5cbiAgfVxuICAuZm9ybS1ncm91cHtcbiAgICBtYXJnaW4tcmlnaHQ6IDQwJTtcbiAgfVxuICAuYnRuLmJ0bi1wcmltYXJ5IHtcbiAgIFxuICAgIG1hcmdpbi1sZWZ0OiA1JTtcbiAgfVxuICAubWF0ZXJpYWwtaWNvbnN7XG4gICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xuICB9XG4gIC5tYXRlcmlhbC1pY29uczpob3ZlcntcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gIH1cbnRhYmxlIHtcbiAgd2lkdGg6IDQ4JTtcbn1cbiJdfQ== */\"","module.exports = \"<mat-tab-group mat-align-tabs=\\\"center\\\" class=\\\"example\\\">\\n  <mat-tab label=\\\"Add\\\">\\n    <header><h3>Add employees</h3></header>\\n    <form [formGroup]=\\\"add\\\">\\n      <fieldset class=\\\"form-group\\\">\\n        <br>\\n        <mat-form-field>\\n\\n          <input matInput placeholder=\\\"Employee ID\\\" formControlName=\\\"empID\\\" type=\\\"number\\\">\\n          <mat-hint>Enter an integer</mat-hint>\\n\\n        </mat-form-field>\\n        <br><br>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Name\\\" formControlName=\\\"name\\\">\\n        </mat-form-field>\\n        <br><br>\\n        <mat-form-field>\\n          <input matInput placeholder=\\\"Salary\\\" formControlName=\\\"salary\\\" type=\\\"number\\\">\\n        </mat-form-field>\\n        <br><br>\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"onSubmit()\\\">Submit</button>\\n      </fieldset>\\n    </form>\\n    <br>\\n\\n  </mat-tab>\\n  <mat-tab label=\\\"View\\\">\\n\\n    <br>\\n    <br>\\n    <br>\\n    <table mat-table [dataSource]=\\\"employees\\\" class=\\\"mat-elevation-z8\\\">\\n\\n      <!--- Note that these columns can be defined in any order.\\n            The actual rendered columns are set as a property on the row definition\\\" -->\\n\\n      <!-- Position Column -->\\n      <ng-container matColumnDef=\\\"position\\\">\\n        <th mat-header-cell *matHeaderCellDef> No.</th>\\n        <td mat-cell *matCellDef=\\\"let i=index\\\"> {{i + 1}} </td>\\n      </ng-container>\\n\\n      <!-- Name Column -->\\n      <ng-container matColumnDef=\\\"name\\\">\\n        <th mat-header-cell *matHeaderCellDef> Name</th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\n      </ng-container>\\n\\n      <!-- Weight Column -->\\n      <ng-container matColumnDef=\\\"salary\\\">\\n        <th mat-header-cell *matHeaderCellDef> Salary</th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.salary}} </td>\\n      </ng-container>\\n\\n      <!-- Symbol Column -->\\n      <ng-container matColumnDef=\\\"empID\\\">\\n        <th mat-header-cell *matHeaderCellDef> Employee ID</th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.empID}} </td>\\n      </ng-container>\\n\\n      <!-- Symbol Column -->\\n      <ng-container matColumnDef=\\\"action\\\">\\n        <th mat-header-cell *matHeaderCellDef> Action</th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"><i class=\\\"material-icons\\\" (click)=\\\"openDialog(element)\\\">\\n          edit\\n        </i> <i class=\\\"material-icons\\\" (click)=\\\"onDelete(element.empID)\\\">\\n          delete\\n        </i></td>\\n      </ng-container>\\n\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n\\n\\n  </mat-tab>\\n\\n\\n</mat-tab-group>\\n\\n\\n<br>\\n<br>\\n<br>\\n<br>\\n<br>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {HttpClientService} from '../httpclient.service';\nimport {MatDialog, MatSnackBar, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material';\nimport {NewDialogComponent} from '../new-dialog/new-dialog.component';\n\n@Component({\n  selector: 'app-employee',\n  templateUrl: './employee.component.html',\n  styleUrls: ['./employee.component.css']\n})\nexport class EmployeeComponent implements OnInit {\n  employees: Array<any>;\n  emailFormControl = new FormControl('', [\n    Validators.required\n  ]);\n  add:FormGroup;\n  editClicked: boolean = false;\n  displayedColumns: string[] = ['position', 'name', 'salary', 'empID', 'action'];\n  index = 0;\n  dataSource = this.employees;\n\n\n  constructor(private httpclient: HttpClientService, public snackBar: MatSnackBar, private formBuilder: FormBuilder, public dialog: MatDialog) { }\n  ngOnInit() {\n    this.httpclient.getEmployees().subscribe(data => {\n      this.employees = data; });\n    this.add = this.formBuilder.group({\n      \"empID\": new FormControl(0),\n      \"name\": new FormControl(''),\n      \"salary\": new FormControl(0)\n    });\n  }\n\n  onSubmit() {\n      console.log('test');\n      console.log(this.add);\n      this.httpclient.addEmployees(this.add.getRawValue()).subscribe(\n        response => {\n          console.log(response);\n          this.snackBar.open(response.text, 'Dismiss',\n            {\n              duration: 3000\n            });\n        },\n        error => {\n          console.log(error);\n        }\n      );\n  }\n\n  onDelete(id: any) {\n    this.httpclient.deleteEmployees(id).subscribe(\n      response => {\n        console.log(response);\n        console.log(response[\"text\"]);\n      }\n    );\n    console.log('delete Works!');\n    console.log(id);\n  }\n  onEdit() {\n    this.editClicked = true;\n  }\n  openDialog(details: any): void {\n    const dialogRef = this.dialog.open(NewDialogComponent, {\n      width: '50%',\n      data: {name: details.name, empID: details.empID, salary: details.salary}\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n    });\n  }\n\n\n\n}\n\n\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\n\nimport {Observable} from 'rxjs';\nimport { fromEventPattern } from 'rxjs';\n\nexport class Employees {\n  constructor(\n    public empID: number,\n    public name: string,\n    public  salary: number\n  ) {}\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpClientService {\n  constructor(\n    private httpClient: HttpClient\n  ) {\n  }\n  BaseUrl = 'http://localhost:8080/crud-0.0.1-SNAPSHOT';\n  headers = new Headers({'Content-Type': 'application/json'});\n  getEmployees(): Observable<any> {\n    console.log('test call');\n    return this.httpClient.get(this.BaseUrl + '/read_all');\n\n\n  }\n  addEmployees(details: any): Observable<any> {\n   /* let body = JSON.stringify(details);\n    console.log(body);*/\n    /*let headers = new Headers({'Content-Type': 'application/json'});\n    let options = { headers : headers };*/\n    return this.httpClient.post(this.BaseUrl + '/create', details);\n  }\n  deleteEmployees(id: any): Observable<any> {\n\n    return this.httpClient.delete<any>(this.BaseUrl + '/delete/' + id);\n  }\n  public updateEmployees(details: any): Observable<any> {\n\n    return this.httpClient.put(this.BaseUrl + '/update', details);\n\n  }\n\n\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL25ldy1kaWFsb2cvbmV3LWRpYWxvZy5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<form [formGroup]=\\\"edit\\\">\\n  <fieldset class=\\\"form-group\\\">\\n    <br>\\n    <mat-form-field>\\n\\n      <input matInput placeholder=\\\"Employee ID\\\" formControlName=\\\"empID\\\" type=\\\"number\\\">\\n      <mat-hint>Enter an integer</mat-hint>\\n\\n    </mat-form-field>\\n    <br><br>\\n    <mat-form-field>\\n      <input matInput placeholder=\\\"Name\\\" formControlName=\\\"name\\\">\\n    </mat-form-field>\\n    <br><br>\\n    <mat-form-field>\\n      <input matInput placeholder=\\\"Salary\\\" formControlName=\\\"salary\\\" type=\\\"number\\\">\\n    </mat-form-field>\\n\\n    <div mat-dialog-actions>\\n      <button mat-raised-button color=\\\"primary\\\"  [mat-dialog-close]=\\\"data.animal\\\"  cdkFocusInitial (click)=\\\"onSubmit()\\\">Edit</button>\\n    </div>\\n  </fieldset>\\n</form>\\n\"","import {Component, Inject, Injectable, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport {MAT_DIALOG_DATA, MatDialogRef, MatSnackBar} from '@angular/material';\nimport {HttpClientService} from '../httpclient.service';\n\n@Component({\n  selector: 'app-new-dialog',\n  templateUrl: './new-dialog.component.html',\n  styleUrls: ['./new-dialog.component.css']\n})\nexport class NewDialogComponent implements OnInit {\n  edit: FormGroup;\n  constructor(public dialogRef: MatDialogRef<NewDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: any, private formBuilder: FormBuilder, private httpclient: HttpClientService, public snackBar: MatSnackBar ) { }\n\n  ngOnInit() {\n\n    this.edit = this.formBuilder.group({\n      \"empID\": new FormControl(this.data.empID),\n      \"name\": new FormControl(this.data.name),\n      \"salary\": new FormControl(this.data.salary)\n    });\n\n  }\n  onSubmit() {\n    console.log('test');\n    console.log(this.edit);\n    this.httpclient.updateEmployees(this.edit.getRawValue()).subscribe(\n      response => {\n        console.log(response.text);\n        this.snackBar.open(response.text, 'Dismiss',\n          {\n            duration: 3000\n          });\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}